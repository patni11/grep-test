import OpenAI from 'openai'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

export interface ChangelogGenerationData {
  commits: Array<{
    sha: string
    message: string
    author_name: string
    author_email: string
    committed_at: string
  }>
  repoName: string
  repoFullName: string
  repoUrl?: string
  isPrivate?: boolean
}

export async function generateChangelogWithAI(data: ChangelogGenerationData): Promise<{
  title: string
  content: string
  version: string
}> {
  const { commits, repoName, repoFullName, repoUrl, isPrivate } = data
  
  // Generate a version number based on current date
  const now = new Date()
  const version = `v${now.getFullYear()}.${(now.getMonth() + 1).toString().padStart(2, '0')}.${now.getDate().toString().padStart(2, '0')}`
  
  // Prepare commit data for the AI prompt
  const commitSummary = commits.map((commit, index) => 
    `${index + 1}. ${commit.message.split('\n')[0]} (by ${commit.author_name} on ${new Date(commit.committed_at).toLocaleDateString()})`
  ).join('\n')
  
  const prompt = `
You are an expert technical writer creating a changelog for a software repository. 

Repository Information:
- Name: ${repoName}
- Full Name: ${repoFullName}
- Type: ${isPrivate ? 'Private' : 'Public'} repository
${repoUrl ? `- URL: ${repoUrl}` : ''}

Recent Commits (${commits.length} total):
${commitSummary}

Please generate a comprehensive and professional changelog that:
1. Analyzes the commits to understand what the software/project does
2. Groups changes into logical categories (Features, Bug Fixes, Improvements, etc.)
3. Provides clear, user-friendly descriptions of what each change means
4. Uses appropriate emojis for visual appeal
5. Explains the impact of changes on users
6. Uses professional technical writing tone

The changelog should be in Markdown format and help users understand what has changed and why it matters.

Return ONLY the changelog content in markdown format, starting with a level 1 heading.
`

  try {
    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: "You are an expert technical writer specializing in creating clear, comprehensive changelogs for software projects. You understand how to analyze commit messages and translate technical changes into user-friendly descriptions."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      max_tokens: 2000,
      temperature: 0.7,
    })

    const aiGeneratedContent = response.choices[0]?.message?.content
    
    if (!aiGeneratedContent) {
      throw new Error('No content generated by OpenAI')
    }

    // Add metadata footer
    const content = `${aiGeneratedContent}\n\n---\n*This changelog was automatically generated using AI from ${commits.length} recent commits.*`
    
    // Generate title
    const title = `${repoName} - ${version}`
    
    return { title, content, version }
    
  } catch (error) {
    console.error('OpenAI API Error:', error)
    
    // Fallback to simple generation if OpenAI fails
    return generateSimpleChangelog(data, version)
  }
}

// Fallback function for when OpenAI is unavailable
function generateSimpleChangelog(data: ChangelogGenerationData, version: string): {
  title: string
  content: string
  version: string
} {
  const { commits, repoName } = data
  
  // Generate title
  const title = `${repoName} - ${version}`
  
  // Process commits into meaningful categories
  const features: string[] = []
  const fixes: string[] = []
  const improvements: string[] = []
  const other: string[] = []
  
  commits.forEach(commit => {
    const message = commit.message.split('\n')[0] // First line only
    const lowerMessage = message.toLowerCase()
    
    if (lowerMessage.includes('feat') || lowerMessage.includes('add') || lowerMessage.includes('new')) {
      features.push(`- ${message}`)
    } else if (lowerMessage.includes('fix') || lowerMessage.includes('bug') || lowerMessage.includes('patch')) {
      fixes.push(`- ${message}`)
    } else if (lowerMessage.includes('improve') || lowerMessage.includes('update') || lowerMessage.includes('enhance') || lowerMessage.includes('refactor')) {
      improvements.push(`- ${message}`)
    } else if (!lowerMessage.includes('merge') && !lowerMessage.includes('bump') && message.trim().length > 10) {
      // Filter out merge commits and version bumps, and very short messages
      other.push(`- ${message}`)
    }
  })
  
  // Build changelog content
  const now = new Date()
  let content = `# ${title}\n\n`
  content += `**Release Date:** ${now.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}\n\n`
  
  if (features.length > 0) {
    content += `## 🚀 New Features\n${features.join('\n')}\n\n`
  }
  
  if (improvements.length > 0) {
    content += `## ✨ Improvements\n${improvements.join('\n')}\n\n`
  }
  
  if (fixes.length > 0) {
    content += `## 🐛 Bug Fixes\n${fixes.join('\n')}\n\n`
  }
  
  if (other.length > 0) {
    content += `## 📝 Other Changes\n${other.join('\n')}\n\n`
  }
  
  if (features.length === 0 && improvements.length === 0 && fixes.length === 0 && other.length === 0) {
    content += `## 📝 Changes\n- No significant changes detected in recent commits\n\n`
  }
  
  content += `---\n*This changelog was automatically generated from ${commits.length} recent commits (OpenAI unavailable).*`
  
  return { title, content, version }
}

export { openai } 