import OpenAI from 'openai'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

export interface ChangelogGenerationData {
  commits: Array<{
    sha: string
    message: string
    author_name: string
    author_email: string
    committed_at: string
  }>
  repoName: string
  repoFullName: string
  repoUrl?: string
  isPrivate?: boolean
}

// Group commits by month for better organization
function groupCommitsByMonth(commits: Array<{
  sha: string
  message: string
  author_name: string
  author_email: string
  committed_at: string
}>) {
  const groups: Record<string, typeof commits> = {}
  
  commits.forEach(commit => {
    const date = new Date(commit.committed_at)
    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`
    const monthLabel = date.toLocaleDateString('en-US', { year: 'numeric', month: 'long' })
    
    if (!groups[monthKey]) {
      groups[monthKey] = []
    }
    groups[monthKey].push(commit)
  })
  
  // Sort by month (newest first)
  const sortedEntries = Object.entries(groups).sort(([a], [b]) => b.localeCompare(a))
  
  return sortedEntries.map(([monthKey, monthCommits]) => {
    const date = new Date(monthKey + '-01')
    const monthLabel = date.toLocaleDateString('en-US', { year: 'numeric', month: 'long' })
    return { monthKey, monthLabel, commits: monthCommits }
  })
}

export async function generateChangelogWithAI(data: ChangelogGenerationData): Promise<{
  title: string
  content: string
  version: string
}> {
  const { commits, repoName, repoFullName, repoUrl, isPrivate } = data
  
  // Generate a version number based on current date
  const now = new Date()
  const version = `v${now.getFullYear()}.${(now.getMonth() + 1).toString().padStart(2, '0')}.${now.getDate().toString().padStart(2, '0')}`
  
  // Group commits by month
  const monthlyGroups = groupCommitsByMonth(commits)
  
  // Prepare commit data for the AI prompt with monthly structure
  const monthlyCommitSummary = monthlyGroups.map(({ monthLabel, commits: monthCommits }) => {
    const commitList = monthCommits.map((commit, index) => 
      `  ${index + 1}. ${commit.message.split('\n')[0]} (by ${commit.author_name} on ${new Date(commit.committed_at).toLocaleDateString()})`
    ).join('\n')
    
    return `**${monthLabel}** (${monthCommits.length} commits):\n${commitList}`
  }).join('\n\n')
  
  const prompt = `
You are an expert technical writer creating a changelog for a software repository. 

Repository Information:
- Name: ${repoName}
- Full Name: ${repoFullName}
- Type: ${isPrivate ? 'Private' : 'Public'} repository
${repoUrl ? `- URL: ${repoUrl}` : ''}

Recent Commits Grouped by Month (${commits.length} total):
${monthlyCommitSummary}

Please generate a comprehensive and professional changelog that:
1. Groups changes by MONTH (as shown above) - this is CRITICAL
2. For each month, create a beautiful card-like section with the month name as a header
3. Within each month, categorize changes into logical groups (Features, Bug Fixes, Improvements, etc.)
4. Provides clear, user-friendly descriptions of what each change means
5. Uses appropriate emojis for visual appeal and categorization
6. Explains the impact of changes on users
7. Uses professional technical writing tone
8. Makes it visually appealing with proper markdown formatting

The structure should be:
# [Repository Name] - [Version]

## üìÖ [Month Year] 
[Description of month's changes]

### üöÄ New Features
- [Feature descriptions]

### üêõ Bug Fixes
- [Fix descriptions]

### ‚ú® Improvements
- [Improvement descriptions]

(Repeat for each month)

Return ONLY the changelog content in markdown format, starting with a level 1 heading.
`

  try {
    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: "You are an expert technical writer specializing in creating beautiful, month-grouped changelogs for software projects. You understand how to analyze commit messages, group them by time periods, and translate technical changes into user-friendly descriptions with beautiful formatting."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      max_tokens: 3000,
      temperature: 0.7,
    })

    const aiGeneratedContent = response.choices[0]?.message?.content
    
    if (!aiGeneratedContent) {
      throw new Error('No content generated by OpenAI')
    }

    // Add metadata footer
    const content = `${aiGeneratedContent}\n\n---\n\n### üìä Generation Details\n- **Total Commits Analyzed:** ${commits.length}\n- **Time Period:** ${monthlyGroups.length} month${monthlyGroups.length !== 1 ? 's' : ''}\n- **Generated:** ${new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' })}\n\n*This changelog was automatically generated using AI from recent commits.*`
    
    // Generate title
    const title = `${repoName} - ${version}`
    
    return { title, content, version }
    
  } catch (error) {
    console.error('OpenAI API Error:', error)
    
    // Fallback to simple generation if OpenAI fails
    return generateSimpleChangelog(data, version)
  }
}

// Fallback function for when OpenAI is unavailable
function generateSimpleChangelog(data: ChangelogGenerationData, version: string): {
  title: string
  content: string
  version: string
} {
  const { commits, repoName } = data
  
  // Generate title
  const title = `${repoName} - ${version}`
  
  // Group commits by month
  const monthlyGroups = groupCommitsByMonth(commits)
  
  // Build changelog content with monthly structure
  const now = new Date()
  let content = `# ${title}\n\n`
  content += `**Release Date:** ${now.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}\n\n`
  
  monthlyGroups.forEach(({ monthLabel, commits: monthCommits }) => {
    content += `## üìÖ ${monthLabel}\n\n`
    content += `*${monthCommits.length} commit${monthCommits.length !== 1 ? 's' : ''} this month*\n\n`
    
    // Process commits into meaningful categories for this month
    const features: string[] = []
    const fixes: string[] = []
    const improvements: string[] = []
    const other: string[] = []
    
    monthCommits.forEach(commit => {
      const message = commit.message.split('\n')[0] // First line only
      const lowerMessage = message.toLowerCase()
      const date = new Date(commit.committed_at).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })
      
      if (lowerMessage.includes('feat') || lowerMessage.includes('add') || lowerMessage.includes('new')) {
        features.push(`- **${message}** *(${date})*`)
      } else if (lowerMessage.includes('fix') || lowerMessage.includes('bug') || lowerMessage.includes('patch')) {
        fixes.push(`- **${message}** *(${date})*`)
      } else if (lowerMessage.includes('improve') || lowerMessage.includes('update') || lowerMessage.includes('enhance') || lowerMessage.includes('refactor')) {
        improvements.push(`- **${message}** *(${date})*`)
      } else if (!lowerMessage.includes('merge') && !lowerMessage.includes('bump') && message.trim().length > 10) {
        // Filter out merge commits and version bumps, and very short messages
        other.push(`- **${message}** *(${date})*`)
      }
    })
    
    if (features.length > 0) {
      content += `### üöÄ New Features\n${features.join('\n')}\n\n`
    }
    
    if (improvements.length > 0) {
      content += `### ‚ú® Improvements\n${improvements.join('\n')}\n\n`
    }
    
    if (fixes.length > 0) {
      content += `### üêõ Bug Fixes\n${fixes.join('\n')}\n\n`
    }
    
    if (other.length > 0) {
      content += `### üìù Other Changes\n${other.join('\n')}\n\n`
    }
    
    if (features.length === 0 && improvements.length === 0 && fixes.length === 0 && other.length === 0) {
      content += `### üìù Changes\n- No significant changes detected in commits\n\n`
    }
    
    content += `---\n\n`
  })
  
  content += `### üìä Generation Details\n- **Total Commits Analyzed:** ${commits.length}\n- **Time Period:** ${monthlyGroups.length} month${monthlyGroups.length !== 1 ? 's' : ''}\n- **Generated:** ${now.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' })}\n\n*This changelog was automatically generated from recent commits (OpenAI unavailable).*`
  
  return { title, content, version }
}

export { openai } 